& similarity_perperson$hex2[i]==similarity_perperson$hex1[j]){
similarity_perperson$similarity_reverse[i]<-similarity_perperson$similarity_given[j]
similarity_perperson$similarity_reverse[j]<-"duplicate"
}
}
}
#delete extra rows
similarity_perperson<-subset(similarity_perperson, !(similarity_reverse=="duplicate"))
#asymmetry column
similarity_perperson$similarity_given<-as.numeric(similarity_perperson$similarity_given)
similarity_perperson$similarity_reverse<-as.numeric(similarity_perperson$similarity_reverse)
similarity_perperson$asymmetry<-abs(similarity_perperson$similarity_given-similarity_perperson$similarity_reverse)
}
#MAKE DATAFRAME WITH ASYMMETRY INDEX (AsIn)
{
#Calculating absolute difference between first and second pass similatirity ratings
trialdata_passes$abs <- abs(trialdata_passes$firstpass_similarity-trialdata_passes$secondpass_similarity)
#Creating unique ID for each pair by combining participant ID and Colourpair
trialdata_passes$Colourpairperparticipant <- str_c(trialdata_passes$participant, '',trialdata_passes$Colourpair)
#selecting variables for asymmetry analysis
AsIndata_vars <- c("participant", "Colourpair", "Temporder", "hex1", "hex2", "similarity", "abs", "Colourpairperparticipant")
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#changing to wide so that One row per colour pair per participant (4 ratings per row, first and second pass and reverse order)
AsIndata_wide <- reshape(AsIndata, idvar = "Colourpairperparticipant", timevar = "Temporder", direction = "wide")
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn <- (AsIndata_wide$similarity.first - AsIndata_wide$similarity.second)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
}
#Calculating absolute difference between first and second pass similatirity ratings
trialdata_passes$abs <- abs(trialdata_passes$firstpass_similarity-trialdata_passes$secondpass_similarity)
#Creating unique ID for each pair by combining participant ID and Colourpair
trialdata_passes$Colourpairperparticipant <- str_c(trialdata_passes$participant, '',trialdata_passes$Colourpair)
#selecting variables for asymmetry analysis
AsIndata_vars <- c("participant", "Colourpair", "Temporder", "hex1", "hex2", "similarity", "abs", "Colourpairperparticipant")
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#changing to wide so that One row per colour pair per participant (4 ratings per row, first and second pass and reverse order)
AsIndata_wide <- reshape(AsIndata, idvar = "Colourpairperparticipant", timevar = "Temporder", direction = "wide")
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn <- (AsIndata_wide$similarity.first - AsIndata_wide$similarity.second)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#plot
ggplot(AsIndata_wide) +
aes(x = hex1.first, y = hex1.second, fill = AsIn) +
geom_raster() +
scale_fill_distiller(palette = "RdBu", direction = 1, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=sort(unique(AsIndata_wide$hex1.first))))+
theme(axis.text.y = element_text(size= 7, colour=sort(unique(AsIndata_wide$hex1.second))))
IH_vars<- c("participant", "Ishi_textbox.text", "Ishi_trial_keyresp.rt", "imageaddress")
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
setwd("~/thesis/colas_analysis")
IH_vars<- c("participant", "Ishi_textbox.text", "Ishi_trial_keyresp.rt", "imageaddress")
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
library(readxl)
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#coercing answers into numeric for efficient matching
IHdata$answer.numeric <- as.numeric(IHdata$Ishi_textbox.text)
IHdata$match <- IHdata$answer.numeric==IHdata$correctanswer
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/",total_IH,"/", "16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#get IH correctly answered
{get_IHcorrectQs<- function(z){
temp_df <- subset(IHdata,participant==z)
correct_IH<- nrow(subset(temp_df,match==TRUE))
return(correct_IH)
}
IH_perperson$correctA<-lapply(IH_perperson$participant, get_IHcorrectQs)
IH_perperson$correctA <- as.numeric(IH_perperson$correctA)
}
#get IH questions answered
{get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
}
#get average response time
{get_IHrt<- function(z){
temp_df <- subset(IHdata,participant==z)
rt_IH<-mean(temp_df$Ishi_trial_keyresp.rt)
return(rt_IH)
}
IH_perperson$mean.rt <- lapply(IH_perperson$participant, get_IHrt)
IH_perperson$mean.rt <- as.numeric((IH_perperson$mean.rt))
}
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
#this participant submitted two files
IH_perperson <- subset(IH_perperson,!participant == "61716a16c157db249e36fc46")
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
View(means)
View(low_catch)
View(IH_perperson)
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#coercing answers into numeric for efficient matching
IHdata$answer.numeric <- as.numeric(IHdata$Ishi_textbox.text)
IHdata$match <- IHdata$answer.numeric==IHdata$correctanswer
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
#make catch data frame
IHdata<-data[IH_vars]
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
View(datasmall)
View(df)
View(catch_perperson)
View(participants)
##Data with Ishihara test
#make a list of data file names
waveiv.files <- list.files(path="./data/wave IV", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
waveiv.data <- sapply(waveiv.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
data <- bind_rows(pb.data, data, pilot.data, waveiv.data)
data <- waveiv.data
IH_vars<- c("participant", "Ishi_textbox.text", "Ishi_trial_keyresp.rt", "imageaddress")
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#coercing answers into numeric for efficient matching
IHdata$answer.numeric <- as.numeric(IHdata$Ishi_textbox.text)
IHdata$match <- IHdata$answer.numeric==IHdata$correctanswer
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
View(data)
View(IH_perperson)
single <- subset(data, participant == "5ecf3e5fa3d3b6350199c5e1")
View(single)
#make catch data frame
IHdata<-data[IH_vars]
single <- subset(IH_data, participant == "5ecf3e5fa3d3b6350199c5e1")
single <- subset(IHdata, participant == "5ecf3e5fa3d3b6350199c5e1")
single <- subset(IHdata, participant == "5ecf3e5fa3d3b6350199c5e1")
View(single)
IH_vars<- c("participant", "Ishi_textbox.text", "imageaddress")
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#coercing answers into numeric for efficient matching
IHdata$answer.numeric <- as.numeric(IHdata$Ishi_textbox.text)
IHdata$match <- IHdata$answer.numeric==IHdata$correctanswer
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
get_IHscoredecimal<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscoredecimal<-format(round(correct_IH/total_IH, 2), nsmall = 2)
IHscoredecimal<-as.numeric(IHscoredecimal)
return(IHscoredecimal)
}
IH_perperson$score_decimal<-lapply(IH_perperson$participant, get_IHscoredecimal)
get_IHscorefraction<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
correct_IH<- nrow(subset(temp_df,Ishi_textbox.text==correctanswer))
IHscorefraction<-paste(correct_IH,"/",total_IH,"/", "16")
return(IHscorefraction)
}
IH_perperson$score_fraction<-lapply(IH_perperson$participant, get_IHscorefraction)
#get IH correctly answered
{get_IHcorrectQs<- function(z){
temp_df <- subset(IHdata,participant==z)
correct_IH<- nrow(subset(temp_df,match==TRUE))
return(correct_IH)
}
IH_perperson$correctA<-lapply(IH_perperson$participant, get_IHcorrectQs)
IH_perperson$correctA <- as.numeric(IH_perperson$correctA)
}
#get IH questions answered
{get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
}
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
#this participant submitted two files
IH_perperson <- subset(IH_perperson,!participant == "61716a16c157db249e36fc46")
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
View(IH_perperson)
IH_perperson <- subset(IH_perperson,!participant == "614deecf67f2c8ccfe3df23b")
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
single <- subset(IHdata, participant == "6081bf53d3c45fe4c8fd3ea3")
View(IHdata)
#Survey dataframe
#select catch variables for analysis
survey_vars<- c("participant", "textbox.text", "textbox_2.text", "textbox_3.text", "textbox_4.text", "textbox_5.text", "textbox_6.text")
#make catch data frame
surveydata<-data[, survey_vars]
#rename answers to make some sense
surveydata <- surveydata %>% rename(location.diffi=textbox.text,
colour.diff= textbox_2.text,
normal.acuity= textbox_3.text,
colour.vision= textbox_4.text,
answer.strategy = textbox_5.text,
serious.check = textbox_6.text)
View(surveydata)
IH_perperson.low <- subset(IH_perperson, correctA <14)
#remove empty cells
surveydata <- surveydata %>% drop_na()
surveydata[!apply(surveydata=="",1,all),]
surveydata <-surveydata[!apply(surveydata=="",1,all),]
surveydata <-surveydata[!apply(surveydata=="",1,any),]
IH_perperson.low$surveyanswer <- lapply(IH_perperson.low$participant, get_surveyanswer)
}
#get self report answer
get_surveyanswer<- function(z){
temp_df <- subset(surveydata,participant==z)
return(colour.vision)
}
IH_perperson.low$surveyanswer <- lapply(IH_perperson.low$participant, get_surveyanswer)
#get self report answer
get_surveyanswer<- function(z){
temp_df <- subset(surveydata,participant==z)
colour.vision <- temp_df$colour.vision
return(colour.vision)
}
IH_perperson.low$surveyanswer <- lapply(IH_perperson.low$participant, get_surveyanswer)
View(IH_perperson.low)
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
#get IH correctly answered
{get_IHcorrectQs<- function(z){
temp_df <- subset(IHdata,participant==z)
correct_IH<- nrow(subset(temp_df,match==TRUE))
return(correct_IH)
}
IH_perperson$correctA<-lapply(IH_perperson$participant, get_IHcorrectQs)
IH_perperson$correctA <- as.numeric(IH_perperson$correctA)
}
#get IH questions answered
{get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
}
#below threshold of normal colour vision
IH_perperson.low <- subset(IH_perperson, correctA <14)
#get self report answer
get_surveyanswer<- function(z){
temp_df <- subset(surveydata,participant==z)
colour.vision <- temp_df$colour.vision
return(colour.vision)
}
IH_perperson.low$surveyanswer <- lapply(IH_perperson.low$participant, get_surveyanswer)
View(IH_perperson)
ggplot(IH_perperson.low, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson.low$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
#format response time
catchdata$response_time_catch<-as.numeric(catchdata$response_time_catch) #for graphing later
#MAKE CATCH_PERPERSON DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make dataframe with catch scores and mean response times
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
#get catch score as decimal
#z=participant id
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
#get catch score as fraction
#z=participant id
get_catchscorefraction<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscorefraction<-paste(correct_catch,"/",total_catch)
return(catchscorefraction)
}
catch_perperson$score_fraction<-lapply(catch_perperson$participant, get_catchscorefraction)
#get mean catch response times
#z=participant id
get_catchresponsetime<- function(z){
temp_df <- subset(catchdata,participant==z)
catchresponsetime<-mean(temp_df$response_time_catch)
return(catchresponsetime)
}
catch_perperson$response_time<-lapply(catch_perperson$participant, get_catchresponsetime)
}
#select trial variables for analysis
trial_vars<- c("participant", "Circle1_colour", "Circle2_colour", "Colourpair", "similarity", "response_time", "Temporder")
#make trial data frame
trialdata <- data[trial_vars]
View(catch_perperson)
View(catch_perperson)
#get catch score
get_catchscore<- function(z){
temp_df <- subset(catch_perperson,participant==z)
catchdecimal <- temp_df$score_decimal
return(catchdecimal)
}
IH_perperson.low$catchdecimal<- lapply(IH_perperson.low$participant, get_catchscore)
IH_perperson.low$catchdecimal <- as.numeric(IH_perperson.low$catchdecimal)
#get catch score
get_catchscore<- function(z){
temp_df <- subset(catch_perperson,participant==z)
catchdecimal <- as.numeric(temp_df$score_decimal)
return(catchdecimal)
}
IH_perperson.low$catchdecimal<- lapply(IH_perperson.low$participant, get_catchscore)
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_point()
IH_perperson.low$catchdecimal <- as.numeric(IH_perperson.low$catchdecimal)
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_point()
IH_perperson.low$catchdecimal<- lapply(IH_perperson.low$participant, get_catchscore)
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_col()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(catchdecimal, correctA))+
geom_col()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(catchdecimal, correctA))+
geom_dotplot()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_dotplot()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_dotplot()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_col()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_boplot()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_boxplot()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_point()
IH_perperson.low$catchdecimal <- as.numeric(IH_perperson.low$catchdecimal)
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(correctA, catchdecimal))+
geom_point()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(catchdecimal, correctA)+
geom_point()
#plot catch vs lowIshihara
ggplot(IH_perperson.low, aes(catchdecimal, correctA))+
geom_point()
IH_perperson$catchdecimal<- lapply(IH_perperson$participant, get_catchscore)
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")
IH_perperson$catchdecimal <- as.numeric(IH_perperson$catchdecimal)
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")
IH_perperson <- subset(IH_perperson,!participant == "614deecf67f2c8ccfe3df23b")
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")+
theme_minimal()
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")+
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$catchdecimal),digits = 2))) +
scale_y_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()
ggplot(IH_perperson, aes(correctA, catchdecimal))+
geom_point(position = "jitter")+
scale_y_continuous(breaks = as.numeric(round(quantile(IH_perperson$catchdecimal),digits = 2))) +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()
#make a list of data file names
demo.files <- list.files(path="./demographics", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
demographics <- sapply(demo.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
#ADD CATCH SCORE
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
demographics$catch.score_decimal<-lapply(demographics$participant, get_catchscoredecimal)
demographics$catch.score_decimal <- as.numeric(demographics$catch.score_decimal)
#MAKE DATAFRAME WITH NA CATCHSCORE
demo.catch.na <- demographics[is.na(demographics$catch.score_decimal),]
#GET MEAN & MEDIAN COMPLETION TIME
demographics$time_mins <- demographics$time_taken/60
demographics <- subset(demographics, !status=='TIMED-OUT')
demographics <- subset(demographics, !status=='RETURNED')
demographics <- subset(demographics, !status=='REJECTED')
mean(demographics$time_mins)
median(demographics$time_mins)
