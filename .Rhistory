labs(x= "Colour presented first", y= "Colour presented second")
}
ggplot(mean_variance) +
aes(x = hex1, y = hex2, fill = var) +
geom_raster() +
scale_fill_gradient(name="Variance" ,low = "grey", high = "black", na.value = "green")+
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 6, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 6, colour=row.facs))+
theme(legend.position = "right")+
labs(x= "Colour presented first", y= "Colour presented second")
mean_asymmetry<-mean_variance
mean_asymmetry$meanas<-NA
for (x in 1:nrow(mean_asymmetry)) {  #makes a temporary dataframe with all the similarity ratings for one colourpair (x = row in mean_similarity ie. one per colourpair)
a<-subset(AsIndata_wide,AsIndata_wide$hex1.first==mean_asymmetry$hex1[x] & AsIndata_wide$hex1.second==mean_asymmetry$hex2[x], c(AsIn)) #similarity with exact hex match
b<-subset(AsIndata_wide,AsIndata_wide$hex1.first==mean_asymmetry$hex2[x] & AsIndata_wide$hex1.second==mean_asymmetry$hex1[x], c(AsIn)) #similarity with flipped hex order
c<-rbind(a, b) #all similarty ratings for colour pair x
mean_asymmetry$meanas[x]<-mean(as.matrix(c))
}
ggplot(mean_asymmetry) +
aes(x = hex1, y = hex2, fill = meanas) +
geom_raster() +
scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 7, colour=row.facs))
#plot with colour pairs
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill = mean.asymmetry) +
geom_raster() +
scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 7, colour=row.facs))
View(colourpairs)
#adding count of colour pairs
get_pair_hitcount<-function(x){ #get number of hits on pair of colour (x = colourpair)
pair_hitcount<-sum(trialdata_passes$pairofcolour == x)
return(pair_hitcount)
}
colourpairs$pair_hitcount <-lapply(colourpairs$pair, get_pair_hitcount)
colourpairs$pair_hitcount <- as.integer(colourpairs$pair_hitcount)
View(trialdata)
View(AsIndata_wide)
View(colourpairs)
View(AsIndata_wide)
View(AsIndata_wide)
View(data)
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
View(catchdata)
#remove empty cells
catchdata <- catchdata %>% drop_na()
#format response time
catchdata$response_time_catch<-as.numeric(catchdata$response_time_catch) #for graphing later
#make dataframe with catch scores and mean response times
catch_perperson<- data.frame(unique(catchdata$participant))
View(catch_perperson)
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
#get catch score as decimal
#z=participant id
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
#get catch score as fraction
#z=participant id
get_catchscorefraction<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscorefraction<-paste(correct_catch,"/",total_catch)
return(catchscorefraction)
}
catch_perperson$score_fraction<-lapply(catch_perperson$participant, get_catchscorefraction)
#get mean catch response times
#z=participant id
get_catchresponsetime<- function(z){
temp_df <- subset(catchdata,participant==z)
catchresponsetime<-mean(temp_df$response_time_catch)
return(catchresponsetime)
}
catch_perperson$response_time<-lapply(catch_perperson$participant, get_catchresponsetime)
View(data)
#could modify y axis to show min/max count for better data/ink ratio
ggplot(trialdata) +
aes(x = similarity, fill = participant) +
geom_bar(position="dodge") +
theme_minimal()+
guides(fill="none")
View(trialdata)
#make trial data frame
trialdata <- data[trial_vars]
#remove empty cells
trialdata <- trialdata %>% drop_na()
trialdata<- trialdata[!apply(trialdata == "", 1, any),]
View(trialdata)
#remove participants with low catch scores (<0.8)
high_catch<-subset(catch_perperson, score_decimal>=0.8)
low_catch <-subset(catch_perperson, score_decimal<0.8)
trialdata<-subset(trialdata, participant %in% high_catch$participant)
#remove participants with incomplete data
participants <- data.frame(unique(trialdata$participant)) #make dataframe of participants
colnames(participants) <- c("participant_id")
get_trial_count<-function(x){ #get number of trials completed (x = participant id)
trial_count<-sum(trialdata$participant == x)
return(trial_count)
}
participants$trial_count <-lapply(participants$participant_id, get_trial_count)
participants_incomplete <- subset(participants,trial_count < 324)
#dataframe of participants with complete data
participants_complete<- subset(participants,trial_count==324)
participants_ubercomplete<- subset(participants,trial_count>324)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id) #subset trialdata for participants who completed all trials
for (x in 1:nrow(participants_complete)) {
trialdata$trialno <- c(1:324)
}
{trialdata$similarity[trialdata$similarity == 4] <- 7
trialdata$similarity[trialdata$similarity == 3] <- 6
trialdata$similarity[trialdata$similarity == 2] <- 5
trialdata$similarity[trialdata$similarity == 1] <- 4
trialdata$similarity[trialdata$similarity == -1] <-3
trialdata$similarity[trialdata$similarity == -2] <-2
trialdata$similarity[trialdata$similarity == -3] <-1
trialdata$similarity[trialdata$similarity == -4] <-0
}
{
#split rgb strings
#x=rgb string
splitrgb <-function(x){
variable<-str_replace_all(x, "\\[|\\]", "") #delete brackets
variable<-strsplit(variable, split = ",") #split string
variable<-lapply(variable, as.numeric)   #convert to numeric
variable<-lapply(variable, "+", 1)  #convert rgb scale
variable<-lapply(variable, "*", 127.5)
return (as.list(unlist(variable)))
}
trialdata$Circle1_colour <- lapply(trialdata[,"Circle1_colour"], splitrgb) #apply function
trialdata$Circle2_colour <- lapply(trialdata[,"Circle2_colour"], splitrgb)
#make dataframes with rows per r, g, and b
circle1_df <- as.data.frame(lapply(trialdata[,"Circle1_colour"], function(x) t(do.call(cbind, x))))
circle2_df <- as.data.frame(lapply(trialdata[,"Circle2_colour"], function(x) t(do.call(cbind, x))))
#swap rows and columns
circle1_df <- t(circle1_df)
circle2_df <- t(circle2_df)
#name columns
colnames(circle1_df) <- c("r1", "g1", "b1")
colnames(circle2_df) <- c("r2", "g2", "b2")
circle1_df<-as.data.frame(circle1_df)
circle2_df<-as.data.frame(circle2_df)
circle1_df$hex1 <- NA
circle2_df$hex2 <- NA
#rgb2hex function
rgb2hex <- function(r, g, b) {rgb(r, g, b, maxColorValue = 255)}
#Get hex in each circle dataframe
circle1_df$hex1 <- apply(circle1_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
circle2_df$hex2 <- apply(circle2_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
#bind circle colour dataframes to trialdata
trialdata <- cbind(trialdata, circle1_df, circle2_df)
}
trialdata_passes<-trialdata
View(trialdata_passes)
names(trialdata_passes)[names(trialdata_passes) == 'similarity'] <- 'firstpass_similarity'
trialdata_passes$secondpass_similarity <- NA
names(trialdata_passes)[names(trialdata_passes) == 'response_time'] <- 'firstpass_responsetime'
trialdata_passes$secondpass_responsetime<-NA
View(trialdata_passes)
View(participants_complete)
for (x in 0:(nrow(participants_complete)-1)) { #put 2nd pass data in that column (x = row number in participants_complete)
trialdata_passes$secondpass_similarity[((x*324)+1):((x*324)+162)] <- trialdata_passes$firstpass_similarity[((x*324)+163):((x*324)+324)]
trialdata_passes$secondpass_responsetime[((x*324)+1):((x*324)+162)] <- trialdata_passes$firstpass_responsetime[((x*324)+163):((x*324)+324)]
}
#delete extra rows
trialdata_passes <- na.omit(trialdata_passes)
#make a column with the mean similarity value from the two passes
means<-data.frame(similarity=rowMeans(trialdata_passes[,c("firstpass_similarity", "secondpass_similarity")]))
View(means)
trialdata_passes<-cbind(trialdata_passes,means)
#make a dataframe to store correlation values
pass_correlation <- data.frame(participants_complete$participant_id)
View(pass_correlation)
names(pass_correlation)[names(pass_correlation) == 'participants_complete.participant_id'] <- 'participant'
pass_correlation$pearson<- NA
pass_correlation$spearman<- NA
View(AsIndata)
View(AsIndata_wide)
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.first"] <- "mean13"
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.second"] <- "mean24"
#Create unique pair name by concatening first colour with second colour
AsIndata_wide$pair13 <- str_c(AsIndata_wide$hex1.first, '',AsIndata_wide$hex2.first)
AsIndata_wide$pair24 <- str_c(AsIndata_wide$hex1.second, '',AsIndata_wide$hex2.second)
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn13 <- (AsIndata_wide$mean13 - AsIndata_wide$mean24)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#selecting variables for asymmetry analysis
AsIndata_vars <- c("participant", "Colourpair", "Temporder", "hex1", "hex2", "similarity", "abs", "Colourpairperparticipant")
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#Calculating absolute difference between first and second pass similatirity ratings
trialdata_passes$abs <- abs(trialdata_passes$firstpass_similarity-trialdata_passes$secondpass_similarity)
#Creating unique ID for each pair by combining participant ID and Colourpair
trialdata_passes$Colourpairperparticipant <- str_c(trialdata_passes$participant, '',trialdata_passes$Colourpair)
#selecting variables for asymmetry analysis
AsIndata_vars <- c("participant", "Colourpair", "Temporder", "hex1", "hex2", "similarity", "abs", "Colourpairperparticipant")
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#changing to wide so that One row per colour pair per participant (4 ratings per row, first and second pass and reverse order)
AsIndata_wide <- reshape(AsIndata, idvar = "Colourpairperparticipant", timevar = "Temporder", direction = "wide")
#renaming because temporder first second makes it confusing with first/second pass
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.first"] <- "mean13" #similarity.first was the mean of the pair for the first temporder so mean13
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.second"] <- "mean24"
#Create unique pair name by concatening first colour with second colour
AsIndata_wide$pair13 <- str_c(AsIndata_wide$hex1.first, '',AsIndata_wide$hex2.first)
AsIndata_wide$pair24 <- str_c(AsIndata_wide$hex1.second, '',AsIndata_wide$hex2.second)
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn13 <- (AsIndata_wide$mean13 - AsIndata_wide$mean24)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#calculating Asymmetry Index as per Nao's formula (M24 -M13)/((A13+A24)+1)
AsIndata_wide$AsIn13 <- (AsIndata_wide$mean24 - AsIndata_wide$mean13)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn13 <- (AsIndata_wide$mean13 - AsIndata_wide$mean24)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#calculating Asymmetry Index as per Nao's formula (M24 -M13)/((A13+A24)+1)
AsIndata_wide$AsIn24 <- (AsIndata_wide$mean24 - AsIndata_wide$mean13)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #similarity with exact hex match
mean13<-mean(a$AsIn13)
return(mean13)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry)
colourpairs$mean.asymmetry<- as.numeric(colourpairs$mean.asymmetry)
colourpairs$mean.asymmetry13<-lapply(colourpairs$pair, get_mean_asymmetry)
colourpairs$mean.asymmetry13<- as.numeric(colourpairs$mean.asymmetry)
get_mean_asymmetry24 <- function(z){
a<-subset(AsIndata_wide, pair24==z) #similarity with exact hex match
mean24<-mean(a$AsIn24)
return(mean24)
}
colourpairs$mean.asymmetry13<-lapply(colourpairs$pair, get_mean_asymmetry13)
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry13 <- function(z){
a<-subset(AsIndata_wide, pair13==z) #similarity with exact hex match
mean13<-mean(a$AsIn13)
return(mean13)
}
get_mean_asymmetry24 <- function(z){
a<-subset(AsIndata_wide, pair24==z) #similarity with exact hex match
mean24<-mean(a$AsIn24)
return(mean24)
}
colourpairs$mean.asymmetry24<-lapply(colourpairs$pair, get_mean_asymmetry24)
colourpairs$mean.asymmetry24<- as.numeric(colourpairs$mean.asymmetry24)
colourpairs$mean.asymmetry13<-lapply(colourpairs$pair, get_mean_asymmetry13)
colourpairs$mean.asymmetry13<- as.numeric(colourpairs$mean.asymmetry13)
get_mean_asymmetry24 <- function(z){
a<-subset(AsIndata_wide, pair24==z) #similarity with exact hex match
mean24<-mean(a$AsIn24)
mean24<-format(round(mean24, 2), nsmall = 2)
mean24<-as.numeric(mean24)
return(mean24)
}
colourpairs$mean.asymmetry24<-lapply(colourpairs$pair, get_mean_asymmetry24)
colourpairs$mean.asymmetry24<- as.numeric(colourpairs$mean.asymmetry24) #make it numeric
test <- subset(AsIndata_wide, pair13 == "#A25739FB702E")
View(test)
test <- subset(AsIndata_wide, pair13 == "#A25739#FB702E")
View(test)
test <- test[AsIn13]
test <- test["AsIn13"]
View(test)
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #getting all the instance in pair13 matching the pair of hexcodes
a<- a[AsIn13] #only keeping the asymmetry score of interest
b<-subset(AsIndata_wide, pair24==z) #repeating with pair24
b<- b[AsIn24] # again keeping only AsIn24
c <-rbind(a, b)
AsIn <- mean(c)
return(AsIn)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry) #apply function
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #getting all the instance in pair13 matching the pair of hexcodes
a<- a["AsIn13"] #only keeping the asymmetry score of interest
b<-subset(AsIndata_wide, pair24==z) #repeating with pair24
b<- b["AsIn24"] # again keeping only AsIn24
c <-rbind(a, b)
AsIn <- mean(c)
return(AsIn)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry) #apply function
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #getting all the instance in pair13 matching the pair of hexcodes
a<- a["AsIn13"] #only keeping the asymmetry score of interest
b<-subset(AsIndata_wide, pair24==z) #repeating with pair24
b<- b["AsIn24"] # again keeping only AsIn24
c <-rbind(a, b)
AsIn <- mean(c)
return(AsIn)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry) #apply function
a<-subset(AsIndata_wide, pair13=="#A25739#FB702E")
a<- a["AsIn13"]
View(a)
b<-subset(AsIndata_wide, pair24=="#A25739#FB702E")
b<- b["AsIn24"]
View(b)
c <-rbind(a, b)
c <-cbind(a, b)
View(c)
names(a)[names(a)== "AsIn13"] <- "AsIn"
names(b)[names(b)== "AsIn24"] <- "AsIn"
c <-rbind(a, b)
mean(c)
mean(c$AsIn)
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #getting all the instance in pair13 matching the pair of hexcodes
a<- a["AsIn13"] #only keeping the asymmetry score of interest
names(a)[names(a)== "AsIn13"] <- "AsIn"
b<-subset(AsIndata_wide, pair24==z) #repeating with pair24
b<- b["AsIn24"] # again keeping only AsIn24
names(b)[names(b)== "AsIn24"] <- "AsIn"
c <-rbind(a, b)
AsIn <- mean(c$AsIn)
return(AsIn)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry) #apply function
#plot with colour pairs
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill = mean.asymmetry) +
geom_raster() +
scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 7, colour=row.facs))
colourpairs$mean.asymmetry<- as.numeric(colourpairs$mean.asymmetry) #make it numeric
#plot with colour pairs
ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill = mean.asymmetry) +
geom_raster() +
scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green") +
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 7, colour=row.facs))
View(group.mean.mat.df)
# for visualisation purposes, make a column value indicating correlation with first row
row.cor <- function(df){
v.cor <- vector()
for(i in 1:nrow(df)){
v.cor <- c(v.cor, cor(df[93],df[i]))
}
return(v.cor)
}
row.factors <- function(colors, correlations){
colors$cor <- correlations
ordered <- colors[order(-colors$cor),]
return(ordered$colour)
}
colours_disordered <- as.data.frame(unique(colourpairs$hex1))
colours_disordered <- rename(colours_disordered, colour = 'unique(colourpairs$hex1)')
row.facs <- row.factors(colours_disordered,row.cor(group.mean.mat.df))
test <- row.cor(group.mean.mat.df)
View(test)
#FUNNEL PLOT Asymmetry x Hitcount
ggplot(colourpairs) +
aes(y = mean.asymmetry, x = pair_hitcount) +
geom_point(position = "jitter") +
geom_hline(yintercept = 0, colour = "red")+
theme_pubr()
#APPLY COLOUR FACTORS TO COLOURPAIRS DATAFRAME
colourpairs$hex1 <- with(colourpairs, factor(hex1, levels = row.facs))
colourpairs$hex2 <- with(colourpairs, factor(hex2, levels = row.facs))
#VISUALISE MEAN SIMILARITY
{ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill = mean.similarity) +
geom_raster() +
scale_fill_gradientn(colors = rainbow(7),breaks= c(0,1,2,3,4,5,6,7))+
theme_pubr()+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 7, colour=row.facs))
}
View(row.facs)
#MAKE DATAFRAME WITH MEAN SIMILARITY PER COLOUR PAIR (AB==BA)
{mean_similarity<-colourpairs
mean_similarity$meanas<-NA
for (x in 1:nrow(mean_similarity)) {  #makes a temporary dataframe with all the similarity ratings for one colourpair (x = row in mean_similarity ie. one per colourpair)
a<-subset(trialdata_passes,trialdata_passes$hex1==mean_similarity$hex1[x] & trialdata_passes$hex2==mean_similarity$hex2[x], c(firstpass_similarity, secondpass_similarity)) #similarity with exact hex match
b<-subset(trialdata_passes,trialdata_passes$hex1==mean_similarity$hex2[x] & trialdata_passes$hex2==mean_similarity$hex1[x], c(firstpass_similarity, secondpass_similarity)) #similarity with flipped hex order
c<-rbind(a, b) #all similarty ratings for colour pair x
mean_similarity$meanas[x]<-mean(as.matrix(c))
}
}
View(mean_variance)
mean_variance<-colourpairs
View(mean_variance)
#Create unique pair name by concatening first colour with second colour
colourpairs$pair <- str_c(colourpairs$hex1, '',colourpairs$hex2)
#get unique hex arrangements
colourpairs <- unique(trialdata_passes[ , c("hex1", "hex2")])
View(colourpairs)
#Create unique pair name by concatening first colour with second colour
colourpairs$pair <- str_c(colourpairs$hex1, '',colourpairs$hex2)
#do the same for trialdata_passes
trialdata_passes$pairofcolour <- str_c(trialdata_passes$hex1, '',trialdata_passes$hex2)
#adding count of colour pairs
get_pair_hitcount<-function(x){ #get number of hits on pair of colour (x = colourpair)
pair_hitcount<-sum(trialdata_passes$pairofcolour == x)
return(pair_hitcount)
}
colourpairs$pair_hitcount <-lapply(colourpairs$pair, get_pair_hitcount)
colourpairs$pair_hitcount <- as.integer(colourpairs$pair_hitcount)
get_mean_similarity <- function(z){
a<-subset(trialdata_passes, pairofcolour==z) #similarity with exact hex match
mean<-mean(a$similarity)
return(mean)
}
colourpairs$mean.similarity<-lapply(colourpairs$pair, get_mean_similarity)
colourpairs$mean.similarity<- as.numeric(colourpairs$mean.similarity)
#APPLY COLOUR FACTORS TO COLOURPAIRS DATAFRAME
colourpairs$hex1 <- with(colourpairs, factor(hex1, levels = row.facs))
colourpairs$hex2 <- with(colourpairs, factor(hex2, levels = row.facs))
mean_variance<-colourpairs
mean_variance$var<-NA
for (x in 1:nrow(mean_variance)) {  #makes a temporary dataframe with all the similarity ratings for one colourpair (x = row in mean_similarity ie. one per colourpair)
a<-subset(trialdata,trialdata$hex1==mean_variance$hex1[x] & trialdata$hex2==mean_variance$hex2[x], c(similarity)) #similarity with exact hex match
b<-subset(trialdata,trialdata$hex1==mean_variance$hex2[x] & trialdata$hex2==mean_variance$hex1[x], c(similarity)) #similarity with flipped hex order
c<-rbind(a, b) #all similarty ratings for colour pair x
mean_variance$var[x]<-var(c)
}
ggplot(mean_variance) +
aes(x = hex1, y = hex2, fill = var) +
geom_raster() +
scale_fill_gradient(name="Variance" ,low = "grey", high = "black", na.value = "green")+
ggthemes::theme_base()+
theme(axis.text.x= element_text(size= 6, angle=90, colour=row.facs))+
theme(axis.text.y = element_text(size= 6, colour=row.facs))+
theme(legend.position = "right")+
labs(x= "Colour presented first", y= "Colour presented second")
#Get Standard Error of Mean
#standard_error <- function(x) sd(x) / sqrt(length(x))
mean_variance$sem <- sqrt(mean_variance$var)/sqrt(mean_variance$pair_hitcount)
#MAKE DATAFRAME WITH ASYMMETRY INDEX (AsIn) for each participant
{
#Calculating absolute difference between first and second pass similatirity ratings
trialdata_passes$abs <- abs(trialdata_passes$firstpass_similarity-trialdata_passes$secondpass_similarity)
#Creating unique ID for each pair by combining participant ID and Colourpair
trialdata_passes$Colourpairperparticipant <- str_c(trialdata_passes$participant, '',trialdata_passes$Colourpair)
#selecting variables for asymmetry analysis
AsIndata_vars <- c("participant", "Colourpair", "Temporder", "hex1", "hex2", "similarity", "abs", "Colourpairperparticipant")
#making dataframe
AsIndata <- trialdata_passes[AsIndata_vars]
#changing to wide so that One row per colour pair per participant (4 ratings per row, first and second pass and reverse order)
AsIndata_wide <- reshape(AsIndata, idvar = "Colourpairperparticipant", timevar = "Temporder", direction = "wide")
#renaming because temporder first second makes it confusing with first/second pass
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.first"] <- "mean13" #similarity.first was the mean of the pair for the first temporder so mean13
names(AsIndata_wide)[names(AsIndata_wide) == "similarity.second"] <- "mean24"
#Create unique pair name by concatening first colour with second colour
AsIndata_wide$pair13 <- str_c(AsIndata_wide$hex1.first, '',AsIndata_wide$hex2.first)
AsIndata_wide$pair24 <- str_c(AsIndata_wide$hex1.second, '',AsIndata_wide$hex2.second)
#calculating Asymmetry Index as per Nao's formula (M13 -M24)/((A13+A24)+1)
AsIndata_wide$AsIn13 <- (AsIndata_wide$mean13 - AsIndata_wide$mean24)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
#calculating Asymmetry Index as per Nao's formula (M24 -M13)/((A13+A24)+1)
AsIndata_wide$AsIn24 <- (AsIndata_wide$mean24 - AsIndata_wide$mean13)/
((AsIndata_wide$abs.first + AsIndata_wide$abs.second) + 1)
}
#GET AsIn in Colourpairs DATAFRAME
get_mean_asymmetry <- function(z){
a<-subset(AsIndata_wide, pair13==z) #getting all the instance in pair13 matching the pair of hexcodes
a<- a["AsIn13"] #only keeping the asymmetry score of interest
names(a)[names(a)== "AsIn13"] <- "AsIn" #rename to be able to rbind with b
b<-subset(AsIndata_wide, pair24==z) #repeating with pair24
b<- b["AsIn24"] # again keeping only AsIn24
names(b)[names(b)== "AsIn24"] <- "AsIn" #rename to be able to rbind with a
c <-rbind(a, b)
AsIn <- mean(c$AsIn)
return(AsIn)
}
colourpairs$mean.asymmetry<-lapply(colourpairs$pair, get_mean_asymmetry) #apply function
colourpairs$mean.asymmetry<- as.numeric(colourpairs$mean.asymmetry) #make it numeric
mean_variance<-colourpairs
mean_variance$var<-NA
for (x in 1:nrow(mean_variance)) {  #makes a temporary dataframe with all the similarity ratings for one colourpair (x = row in mean_similarity ie. one per colourpair)
a<-subset(trialdata,trialdata$hex1==mean_variance$hex1[x] & trialdata$hex2==mean_variance$hex2[x], c(similarity)) #similarity with exact hex match
b<-subset(trialdata,trialdata$hex1==mean_variance$hex2[x] & trialdata$hex2==mean_variance$hex1[x], c(similarity)) #similarity with flipped hex order
c<-rbind(a, b) #all similarty ratings for colour pair x
mean_variance$var[x]<-var(c)
}
#Get Standard Error of Mean
#standard_error <- function(x) sd(x) / sqrt(length(x))
mean_variance$sem <- sqrt(mean_variance$var)/sqrt(mean_variance$pair_hitcount)
#FUNNEL PLOT Asymmetry x SEM
ggplot(mean_variance) +
aes(y = mean.asymmetry, x = sem) +
geom_point() +
geom_hline(yintercept = 0, colour = "red")+
theme_pubr()
