ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill= pair_hitcount) +
matrix.plot.settings
#heatmap of hitcount (the more a pair is tested, the 'hotter' it gets)
ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill= pair_hitcount) +
matrix.plot.settings +
scale_fill_fermenter(palette = "Greys", direction = 1, name= "Times tested")
#B&W
plot.similarity <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.similarity) +
scale_fill_distiller(name= "Similarity",palette = "Greys", direction = 1,breaks= c(0,1,2,3,4,5,6,7))+
matrix.plot.settings
#    scale_fill_gradient(low= "grey", high= "black",breaks= c(0,1,2,3,4,5,6,7))+
ggsave("mean similarity matrix.png",plot.similarity,height=15,width=17)
#creating one object with setting to ensure they all have the same, also only one thing to update
matrix.plot.settings <- list(geom_raster(),
theme_pubr(25),
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs)),
theme(axis.text.y = element_text(size= 9, colour=row.facs)),
theme(legend.position = "left", legend.key.size = 2),
scale_x_discrete(labels=block_rep), scale_y_discrete(labels=block_rep),
labs(x= "Colour presented first", y= "Colour presented second"))
#B&W
plot.similarity <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.similarity) +
scale_fill_distiller(name= "Similarity",palette = "Greys", direction = 1,breaks= c(0,1,2,3,4,5,6,7))+
matrix.plot.settings
#    scale_fill_gradient(low= "grey", high= "black",breaks= c(0,1,2,3,4,5,6,7))+
ggsave("mean similarity matrix.png",plot.similarity,height=15,width=17)
#creating one object with setting to ensure they all have the same, also only one thing to update
matrix.plot.settings <- list(geom_raster(),
theme_pubr(25),
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs)),
theme(axis.text.y = element_text(size= 9, colour=row.facs)),
theme(legend.position = "left", legend.key.size = unit(2,'cm')),
scale_x_discrete(labels=block_rep), scale_y_discrete(labels=block_rep),
labs(x= "Colour presented first", y= "Colour presented second"))
#B&W
plot.similarity <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.similarity) +
scale_fill_distiller(name= "Similarity",palette = "Greys", direction = 1,breaks= c(0,1,2,3,4,5,6,7))+
matrix.plot.settings
#    scale_fill_gradient(low= "grey", high= "black",breaks= c(0,1,2,3,4,5,6,7))+
ggsave("mean similarity matrix.png",plot.similarity,height=15,width=17)
#creating one object with setting to ensure they all have the same, also only one thing to update
matrix.plot.settings <- list(geom_raster(),
theme_pubr(25),
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs)),
theme(axis.text.y = element_text(size= 9, colour=row.facs)),
theme(legend.position = "left", legend.key.size = unit(1.5,'cm')),
scale_x_discrete(labels=block_rep), scale_y_discrete(labels=block_rep),
labs(x= "Colour presented first", y= "Colour presented second"))
#B&W
plot.similarity <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.similarity) +
scale_fill_distiller(name= "Similarity",palette = "Greys", direction = 1,breaks= c(0,1,2,3,4,5,6,7))+
matrix.plot.settings
#    scale_fill_gradient(low= "grey", high= "black",breaks= c(0,1,2,3,4,5,6,7))+
ggsave("mean similarity matrix.png",plot.similarity,height=15,width=17)
#B&W
plot.variance.sim <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = variance.similarity) +
scale_fill_distiller(name= "Variance",palette = "Greys", direction = 1)+
matrix.plot.settings
ggsave("variance similarity matrix.png",plot.variance.sim,height=15,width=17)
#gradient colour scale
plot.gradient.asym <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.asymmetry) +
scale_fill_distiller(name= "Asymmetry", palette = "PiYG") +
matrix.plot.settings
#scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green")
ggsave("gradient asym matrix.png",plot.gradient.asym,height=15,width=17)
#B&W binned/stepped
plot.variance.sim.bin <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = variance.similarity) +
scale_fill_fermenter(name= "Variance",palette = "Greys", direction = 1)+
matrix.plot.settings
ggsave("variance similarity matrix.bin.png",plot.variance.sim.bin,height=15,width=17)
#gradient colour scale
plot.gradient.asym <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.asymmetry) +
scale_fill_distiller(name= "Asymmetry", palette = "PiYG") +
matrix.plot.settings
#scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green")
ggsave("gradient asym matrix.png",plot.gradient.asym,height=15,width=17)
#scale_fill_gradient2(low ="red", high= "blue", mid ="white", midpoint= 0, na.value = "green")
ggsave("gradient asym matrix.png",plot.gradient.asym,height=13,width=17)
#visualise average asymmetry per column
{ggplot(asym_percolour.df)+
aes(x = color.names, y= average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per column")
}
ggsave("sum.asym.percolumn.png",sum.asym.percolumn,height=13,width=17)
#visualise average asymmetry per column
{sum.asym.percolumn <- ggplot(asym_percolour.df)+
aes(x = color.names, y= average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per column")
ggsave("sum.asym.percolumn.png",sum.asym.percolumn,height=13,width=17)
}
ggsave("sum.asym.percolumn.png",sum.asym.percolumn,height=7,width=17)
#creating one object with setting to ensure they all have the same, also only one thing to update
matrix.plot.settings <- list(geom_raster(),
theme_pubr(25),
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs)),
theme(axis.text.y = element_text(size= 9, colour=row.facs)),
theme(legend.position = "bottom", legend.key.size = unit(1.5,'cm')),
scale_x_discrete(labels=block_rep), scale_y_discrete(labels=block_rep),
labs(x= "Colour presented first", y= "Colour presented second"))
#gradient colour scale
plot.gradient.asym <- ggplot(colourpairs) +
aes(x = fhex1, y = fhex2, fill = mean.asymmetry) +
scale_fill_distiller(name= "Asymmetry", palette = "PiYG") +
matrix.plot.settings
ggsave("gradient asym matrix.png",plot.gradient.asym,height=13,width=17)
ggsave("gradient asym matrix.png",plot.gradient.asym,height=17,width=13)
ggsave("gradient asym matrix.png",plot.gradient.asym,height=17,width=17)
View(asym_percolour.df)
#calculate mean of each column
color.names <- colnames(asym.matrix.df) #get list of colours
asym_percolour.df<- as.data.frame(color.names) #make it a dataframe
asym_percolour.df$average.asymmetry <-colMeans(asym.matrix.df) # add new variable to dataframe with mean of each column in matrix
#apply factors to asym_percolour dataframe
asym_percolour.df$color.names <- with(asym_percolour.df, factor(color.names, levels = row.facs)) #make colour variable as factor for graphing
#calculate variance of each column
asym_percolour.df$Variance <- colVars(asym.matrix)
#replace NAs with zero for graphing
asym_percolour.df[is.na(asym_percolour.df)] = 0
#visualise average asymmetry per column
{sum.asym.percolumn <- ggplot(asym_percolour.df)+
aes(x = color.names, y= average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per column")
ggsave("sum.asym.percolumn.png",sum.asym.percolumn,height=7,width=17)
}
pink<- colourpairs[colourpairs$hex2=="#5FC16E",]
mean(pink$mean.asymmetry)
pink<- colourpairs[colourpairs$hex2=="#e088a1",]
mean(pink$mean.asymmetry)
pink<- colourpairs[colourpairs$hex2=="#E088A1",]
mean(pink$mean.asymmetry)
#visualise asymmetry variance per column
{var.asym.perrow <- ggplot(asym_percolour.df)+
aes(x = color.names, y= Variance, fill= color.names)+
theme_pubr()+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.text.x= element_text(size= 5, angle=90, colour=row.facs))+
labs(y= "Asymmetry variance")
ggsave("var.asym.perrow.png",var.asym.perrow,height=7,width=17)
}
#visualise asymmetry variance per column
{var.asym.perrow <- ggplot(asym_percolour.df)+
aes(x = color.names, y= Variance, fill= color.names)+
theme_pubr()+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.text.x= element_blank())+
labs(y= "Asymmetry variance")
ggsave("var.asym.perrow.png",var.asym.perrow,height=7,width=17)
}
#visualise asymmetry variance per column
{var.asym.perrow <- ggplot(asym_percolour.df)+
aes(x = color.names, y= Variance, fill= color.names)+
theme_pubr(20)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x= element_blank())+
labs(y= "Asymmetry variance")
ggsave("var.asym.perrow.png",var.asym.perrow,height=7,width=17)
}
ggsave("var.asym.perrow.png",var.asym.perrow,height=5,width=17)
ggsave("var.asym.perrow.png",var.asym.perrow,height=4,width=17)
ggplot(asym_percolour.df)+
aes(x = color.names, y= -average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per row")
#calculate variance of each column
asym_percolour.df$Variance <- colVars(asym.matrix, na.rm = TRUE)
#replace NAs with zero for graphing
asym_percolour.df[is.na(asym_percolour.df)] = 0
ggplot(asym_percolour.df)+
aes(x = color.names, y= Variance, fill= color.names)+
theme_pubr(20)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x= element_blank())+
labs(y= "Asymmetry variance")
#visualise asymmetry variance per column
{var.asym.perrow <- ggplot(asym_percolour.df)+
aes(x = color.names, y= Variance, fill= color.names)+
theme_pubr(20)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x= element_blank())+
labs(y= "Asymmetry variance")
ggsave("var.asym.perrow.png",var.asym.perrow,height=4,width=17)
}
ggplot(asym_percolour.df)+
aes(x = color.names, y= -average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per row")
#visualise average asymmetry per column
{avg.asym.percolumn <- ggplot(asym_percolour.df)+
aes(x = color.names, y= -average.asymmetry, fill= color.names)+
theme_pubr(25)+
geom_col()+
scale_x_discrete(labels=block_rep)+
scale_fill_manual(values =c(row.facs))+
guides(fill="none")+
theme(axis.title.x=element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank())+
geom_hline(aes(yintercept =0))+
labs(y= "Asymmetry average per row")
ggsave("avg.asym.percolumn.png",avg.asym.percolumn,height=7,width=17)
}
ggsave("avg.asym.percolumn.png",avg.asym.percolumn,height=7,width=17)
#Isolating one colour for further analysis
single.colour.df <- colourpairs[colourpairs$hex1=="#40A144",] #subsetting
#distribution of asymmetry values for one colour
{ggplot(single.colour.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(single.colour.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(single.colour.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(single.colour.df$hex1)), y = "Frequency")+
theme_pubr()+
theme(axis.text.x = element_text(angle = 45)) #angle the text to make easier to read, not yet working
}
#distribution of asymmetry values for one colour
{ggplot(single.colour.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(single.colour.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(single.colour.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(single.colour.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
#Isolating one colour for further analysis
green.df <- colourpairs[colourpairs$hex1=="#40A144",] #subsetting
green.df <- as.data.frame(green.df)
green.df$hex2 <- with(green.df, factor(hex2, levels = row.facs)) #make colour variable as factor for graphing
#distribution of asymmetry values for one colour
{ggplot(green.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(green.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(single.colour.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(single.colour.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of hitcount
{ggplot(green.df) +
aes(x = hex2, fill = pair_hitcount, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = 1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(single.colour.df$hex1), sep = ""),
fill = "Number of participants") +
theme_pubr()+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 5, angle=90, colour=row.facs))
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of hitcount
{ggplot(green.df) +
aes(x = hex2, fill = pair_hitcount, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = 1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(single.colour.df$hex1), sep = ""),
fill = "Number of participants") +
theme_pubr()+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 7, angle=90, colour=row.facs))
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of hitcount
{ggplot(green.df) +
aes(x = hex2, fill = pair_hitcount, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = 1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(single.colour.df$hex1), sep = ""),
fill = "Number of participants") +
theme_pubr()+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of SEM
{ggplot(green.df) +
aes(x = hex2, fill = sem.asymmetry, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = -1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(green.df$hex1), sep = ""),
fill = "SEM asymmetry") +
theme_pubr()+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 5, angle=90, colour=row.facs))
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of SEM
{ggplot(green.df) +
aes(x = hex2, fill = sem.asymmetry, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = -1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(green.df$hex1), sep = ""),
fill = "SEM asymmetry") +
theme_pubr()+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
#Visualise MDS distance in matrix
{mds.matrix <- ggplot(colourpairs) +
aes(x = hex1, y = hex2, fill = mds.distance) +
scale_fill_distiller(name= "MDS distance",palette = "Greys", direction = -1,breaks= c(0,1,2,3,4,5,6,7))+
matrix.plot.settings
ggsave("mds.matrix.png",mds.matrix,height=17,width=17)
}
View(row.facs)
View(colour_df)
#Isolating one colour for further analysis
red.df <- colourpairs[colourpairs$hex1=="#DA0B27",] #subsetting
red.df <- as.data.frame(red.df)
red.df$hex2 <- with(red.df, factor(hex2, levels = row.facs)) #make colour variable as factor for graphing
#distribution of asymmetry values for one colour
{ggplot(red.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(red.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(red.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(red.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of hitcount
{ggplot(red.df) +
aes(x = hex2, fill = pair_hitcount, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = 1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(red.df$hex1), sep = ""),
fill = "Number of participants") +
theme_pubr(20)+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of SEM
{ggplot(red.df) +
aes(x = hex2, fill = sem.asymmetry, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = -1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(red.df$hex1), sep = ""),
fill = "SEM asymmetry") +
theme_pubr(20)+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
#distribution of asymmetry values for one colour
{ggplot(yellow.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(yellow.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(yellow.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(yellow.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
###YELLOW###
#Isolating one colour for further analysis
yellow.df <- colourpairs[colourpairs$hex1=="#F4D000",] #subsetting
yellow.df <- as.data.frame(yellow.df)
yellow.df$hex2 <- with(yellow.df, factor(hex2, levels = row.facs)) #make colour variable as factor for graphing
#distribution of asymmetry values for one colour
{ggplot(yellow.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(yellow.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(yellow.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(yellow.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of SEM
{ggplot(yellow.df) +
aes(x = hex2, fill = sem.asymmetry, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = -1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(yellow.df$hex1), sep = ""),
fill = "SEM asymmetry") +
theme_pubr(20)+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
###BLUE###
#Isolating one colour for further analysis
blue.df <- colourpairs[colourpairs$hex1=="#5891A2",] #subsetting
blue.df <- as.data.frame(blue.df)
blue.df$hex2 <- with(blue.df, factor(hex2, levels = row.facs)) #make colour variable as factor for graphing
#distribution of asymmetry values for one colour
{ggplot(blue.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(blue.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(blue.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(blue.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
###BLUE###
#Isolating one colour for further analysis
blue.df <- colourpairs[colourpairs$hex1=="#02529A",] #subsetting
blue.df <- as.data.frame(blue.df)
blue.df$hex2 <- with(blue.df, factor(hex2, levels = row.facs)) #make colour variable as factor for graphing
#distribution of asymmetry values for one colour
{ggplot(blue.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(blue.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(blue.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(blue.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
#Visualisation of asymmetry index for one colour only against all other colours to see impact of SEM
{ggplot(blue.df) +
aes(x = hex2, fill = sem.asymmetry, y = mean.asymmetry) +
geom_col() +
scale_fill_distiller(palette = "PuBuGn", direction = -1) +
labs(
x = "Colour compared to",
y = "Asymmetry Index (averaged across participants)",
title = paste("Asymmetries of ", unique(blue.df$hex1), sep = ""),
fill = "SEM asymmetry") +
theme_pubr(20)+
scale_x_discrete(labels=block_rep)+
theme(axis.text.x= element_text(size= 9, angle=90, colour=row.facs))
}
#distribution of asymmetry values for one colour
{blue.dist <- ggplot(blue.df)+
aes(mean.asymmetry)+
geom_histogram(fill= unique(blue.df$hex1))+ #make colour of histogram the colour plotted
scale_x_continuous(breaks = as.numeric(round(quantile(blue.df$mean.asymmetry),digits = 2)))+ #change axis to display quantile value instead of arbitrary values
labs(x = paste(unique(blue.df$hex1)), y = "Frequency")+
theme_pubr(20)
}
ggsave("blue.dist.png",blue.dist,height=4,width=17)
