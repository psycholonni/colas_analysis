#make a dataframe binding all datafiles
waveiv.data <- sapply(waveiv.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
pb.files <- list.files(path="./data/Problematic file", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pb.data <- sapply(pb.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
pb.data$textbox.text <- as.character(pb.data$textbox.text)
data <- bind_rows(pb.data, data, pilot.data, waveiv.data)
}
#block most warnings when loading libraries
shhh <- suppressPackageStartupMessages
#ariel's cheat to display colour in axis
block <- paste(strrep("\U2588",10),sep='')
block_rep <- rep(block,93)
{library(tidyr)
library(plyr)
library(dplyr) %>% shhh
library(ggplot2)
library(gridExtra) %>% shhh
library(MASS) %>% shhh
library(Matrix) %>% shhh
library(reshape2)%>% shhh
library(ape) %>% shhh # stats
library(vegan) %>% shhh # stats
library(RColorBrewer)
library(cocor)
library(DescTools) %>% shhh
library(reshape2)
library(grid)
library(ggplotify)
library(ggpubr) %>% shhh
library(ggthemes)
library(stringr)
library(rgl)
library(tidyverse)
library(plot.matrix) %>% shhh
library(farver)
library(matrixStats) %>% shhh
library(plotrix) %>% shhh
library(JWileymisc)
library(readxl)}
setwd("~/thesis/colas_analysis")
#Create list of colours for factors
{file <- read_xlsx("colourcodes.xlsx")
##CONVERT RGB TO HEX
#split rgb strings
#x=rgb string
splitrgb <-function(x){
variable<-str_replace_all(x, "\\[|\\]", "") #delete brackets
variable<-strsplit(variable, split = ",") #split string
variable<-lapply(variable, as.numeric)   #convert to numeric
variable<-lapply(variable, "/", 100)  #convert rgb scale
variable<-lapply(variable, "*", 255)
return (as.list(unlist(variable)))
}
#remove last character to clean
file$Colourcodes2 <- str_remove(file$Colourcodes, ";")
file$colour <- lapply(file$Colourcodes2, splitrgb)
#make dataframes with rows per r, g, and b
colour_df <- as.data.frame(lapply(file$colour, function(x) t(do.call(cbind, x))))
#swap rows and columns
colour_df <- t(colour_df)
#name columns
colnames(colour_df) <- c("r", "g", "b")
#turn into a dataframe
colour_df<-as.data.frame(colour_df)
colour_df$hex <- NA
#rgb2hex function
rgb2hex <- function(r, g, b) {rgb(r, g, b, maxColorValue = 255)}
#Get hexcode
colour_df$hex <- apply(colour_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
row.facs <- colour_df$hex
}
#READ FILES
{
## Pilot data with Ishihara
#make a list of data file names
pilot.files <- list.files(path="./data/Pilot data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pilot.data <- sapply(pilot.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
#adding Ishihara colomn missing to allow rbind
pilot.data$Ishi_textbox.text <- NA
##Data with Ishihara test
#make a list of data file names
files <- list.files(path="./data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
data <- sapply(files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
waveiv.files <- list.files(path="./data/wave IV", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
waveiv.data <- sapply(waveiv.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
pb.files <- list.files(path="./data/Problematic file", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pb.data <- sapply(pb.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
pb.data$textbox.text <- as.character(pb.data$textbox.text)
data <- bind_rows(pb.data, data, pilot.data, waveiv.data)
}
#screening participants with framerate too low
data <- data[data$frameRate>29,]
#(n=527)
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
{
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
#format response time
catchdata$response_time_catch<-as.numeric(catchdata$response_time_catch) #for graphing later
}
#MAKE CATCH_PERPERSON DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make dataframe with catch scores and mean response times
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
#get catch score as decimal
#z=participant id
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
#get catch score as fraction - NOT VERY USEFUL
#z=participant id
get_catchscorefraction<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscorefraction<-paste(correct_catch,"/",total_catch)
return(catchscorefraction)
}
catch_perperson$score_fraction<-lapply(catch_perperson$participant, get_catchscorefraction)
#get mean catch response times
#z=participant id
get_catchresponsetime<- function(z){
temp_df <- subset(catchdata,participant==z)
catchresponsetime<-mean(temp_df$response_time_catch)
return(catchresponsetime)
}
catch_perperson$response_time<-lapply(catch_perperson$participant, get_catchresponsetime)
}
#MAKING TRIALDATA DATAFRAME WITH ONE ROW PER TRIAL, FOR ALL PARTICIPANTS
{
#select trial variables for analysis
trial_vars<- c("participant", "Circle1_colour", "Circle2_colour", "Colourpair", "similarity", "response_time", "Temporder")
#make trial data frame
trialdata <- data[trial_vars]
#remove empty cells
trialdata <- trialdata %>% drop_na()
trialdata<- trialdata[!apply(trialdata == "", 1, any),]
#remove participants with low catch scores (<0.8)
high_catch<-subset(catch_perperson, score_decimal>=0.8)
low_catch <-subset(catch_perperson, score_decimal<0.8)
trialdata<-subset(trialdata, participant %in% high_catch$participant)
#remove participants with incomplete data
participants <- data.frame(unique(trialdata$participant)) #make dataframe of participants
colnames(participants) <- c("participant_id")
get_trial_count<-function(x){ #get number of trials completed (x = participant id)
trial_count<-sum(trialdata$participant == x)
return(trial_count)
}
participants$trial_count <-lapply(participants$participant_id, get_trial_count)
participants_incomplete <- subset(participants,trial_count < 324)
#dataframe of participants with complete data
participants_complete<- subset(participants,trial_count==324)
participants_ubercomplete<- subset(participants,trial_count>324)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id) #subset trialdata for participants who completed all trials
#make column with trial number
#x=participant
for (x in 1:nrow(participants_complete)) {
trialdata$trialno <- c(1:324)
}
}
#(n=494)
## RESCALE similarity to be 0-7 instead of -4/+4 - ONLY NECESSARY IF NOT ALREADY 0-7
{trialdata$similarity[trialdata$similarity == 4] <- 7
trialdata$similarity[trialdata$similarity == 3] <- 6
trialdata$similarity[trialdata$similarity == 2] <- 5
trialdata$similarity[trialdata$similarity == 1] <- 4
trialdata$similarity[trialdata$similarity == -1] <-3
trialdata$similarity[trialdata$similarity == -2] <-2
trialdata$similarity[trialdata$similarity == -3] <-1
trialdata$similarity[trialdata$similarity == -4] <-0
}
##CONVERT RGB TO HEX FOR GRAPHING (TRIALDATA)
{
#split rgb strings
#x=rgb string
splitrgb <-function(x){
variable<-str_replace_all(x, "\\[|\\]", "") #delete brackets
variable<-strsplit(variable, split = ",") #split string
variable<-lapply(variable, as.numeric)   #convert to numeric
variable<-lapply(variable, "+", 1)  #convert rgb scale
variable<-lapply(variable, "*", 127.5)
return (as.list(unlist(variable)))
}
trialdata$Circle1_colour <- lapply(trialdata[,"Circle1_colour"], splitrgb) #apply function
trialdata$Circle2_colour <- lapply(trialdata[,"Circle2_colour"], splitrgb)
#make dataframes with rows per r, g, and b
circle1_df <- as.data.frame(lapply(trialdata[,"Circle1_colour"], function(x) t(do.call(cbind, x))))
circle2_df <- as.data.frame(lapply(trialdata[,"Circle2_colour"], function(x) t(do.call(cbind, x))))
#swap rows and columns
circle1_df <- t(circle1_df)
circle2_df <- t(circle2_df)
#name columns
colnames(circle1_df) <- c("r1", "g1", "b1")
colnames(circle2_df) <- c("r2", "g2", "b2")
circle1_df<-as.data.frame(circle1_df)
circle2_df<-as.data.frame(circle2_df)
circle1_df$hex1 <- NA
circle2_df$hex2 <- NA
#rgb2hex function
rgb2hex <- function(r, g, b) {rgb(r, g, b, maxColorValue = 255)}
#Get hex in each circle dataframe
circle1_df$hex1 <- apply(circle1_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
circle2_df$hex2 <- apply(circle2_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
#bind circle colour dataframes to trialdata
trialdata <- cbind(trialdata, circle1_df, circle2_df)
}
View(trialdata)
test <- trialdata[trialdata$participant == "610ab7d02fdddca390f96368"]
test <- trialdata[trialdata$participant == "610ab7d02fdddca390f96368",]
View(test)
nrow(unique(test$hex1))
unique(test$hex1)
unique(test$hex2)
order(unique(test$hex1))
order(unique(test$hex2))
colours$hex1 <- unique(test$hex1)
colours <- unique(test$hex1)
colours <- as.datatable(unique(test$hex1))
colours <- as.data.table(unique(test$hex1))
colours <- as.data.frame(unique(test$hex1))
colours$hex2 <- as.data.frame(unique(test$hex2))
View(colours)
sort(colours$`unique(test$hex1)`)
colours$hex2 <- as.character(colours$hex2)
colours$hex2 <- unique(test$hex2))
colours2 <- unique(test$hex2))
colours$hex2 <- unique(test$hex2)
colours$hex1 <- sort(colours$`unique(test$hex1)`)
colours$hex2 <- sort(colours$hex2)
colours$match <- colours$hex1=colours$hex2
colours$match <- colours$hex1==colours$hex2
View(low_catch)
View(high_catch)
setwd("~/thesis/colas_analysis")
#READ FILES
{
#make a list of data file names
demo.files <- list.files(path="./demographics", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
demographics <- sapply(demo.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
}
#LOAD LIBRARIES
{library(tidyr)
library(plyr)
library(dplyr) %>% shhh
library(ggplot2)
library(gridExtra) %>% shhh
library(MASS) %>% shhh
library(Matrix) %>% shhh
library(reshape2)%>% shhh
library(ape) %>% shhh # stats
library(vegan) %>% shhh # stats
library(RColorBrewer)
library(cocor)
library(DescTools) %>% shhh
library(reshape2)
library(grid)
library(ggplotify)
library(ggpubr) %>% shhh
library(ggthemes)
library(stringr)
library(rgl)
library(tidyverse)
library(plot.matrix) %>% shhh
library(farver)
library(matrixStats) %>% shhh
library(plotrix) %>% shhh
library(JWileymisc)
library(readxl)}
#READ FILES
{
#make a list of data file names
demo.files <- list.files(path="./demographics", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
demographics <- sapply(demo.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
}
#READ FILES
{
#make a list of data file names
demo.files <- list.files(path="./demographics", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
demographics <- sapply(demo.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
}
#Age Medan & median
mean(demographics$age, na.rm= TRUE)
sd(demographics$age, na.rm= TRUE)
# get proportion of males/females as well as students
table(demographics$Sex)
demographics <- subset(demographics, !status=='TIMED-OUT')
demographics <- subset(demographics, !status=='RETURNED')
demographics <- subset(demographics, !status=='REJECTED')
#Age Medan & median
mean(demographics$age, na.rm= TRUE)
sd(demographics$age, na.rm= TRUE)
# get proportion of males/females as well as students
table(demographics$Sex)
setwd("~/thesis/colas_analysis")
#READ FILES
{
## Pilot data with Ishihara
#make a list of data file names
pilot.files <- list.files(path="./data/Pilot data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pilot.data <- sapply(pilot.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
#adding Ishihara colomn missing to allow rbind
pilot.data$Ishi_textbox.text <- NA
##Data with Ishihara test
#make a list of data file names
files <- list.files(path="./data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
data <- sapply(files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
waveiv.files <- list.files(path="./data/wave IV", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
waveiv.data <- sapply(waveiv.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
pb.files <- list.files(path="./data/Problematic file", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pb.data <- sapply(pb.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
pb.data$textbox.text <- as.character(pb.data$textbox.text)
data <- bind_rows(pb.data, data, pilot.data, waveiv.data)
}
#(n=527)
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
{
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
#format response time
catchdata$response_time_catch<-as.numeric(catchdata$response_time_catch) #for graphing later
}
#MAKE CATCH_PERPERSON DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make dataframe with catch scores and mean response times
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
#get catch score as decimal
#z=participant id
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
#get catch score as fraction - NOT VERY USEFUL
#z=participant id
get_catchscorefraction<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscorefraction<-paste(correct_catch,"/",total_catch)
return(catchscorefraction)
}
catch_perperson$score_fraction<-lapply(catch_perperson$participant, get_catchscorefraction)
#get mean catch response times
#z=participant id
get_catchresponsetime<- function(z){
temp_df <- subset(catchdata,participant==z)
catchresponsetime<-mean(temp_df$response_time_catch)
return(catchresponsetime)
}
catch_perperson$response_time<-lapply(catch_perperson$participant, get_catchresponsetime)
}
#ADD CATCH SCORE
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
demographics$catch.score_decimal<-lapply(demographics$participant, get_catchscoredecimal)
demographics$catch.score_decimal <- as.numeric(demographics$catch.score_decimal)
#Time taken vs catch score
demographics %>%
filter(!(reviewed_at_datetime %in% "") | is.na(reviewed_at_datetime)) %>%
ggplot() +
aes(x = time_mins, y = catch.score_decimal) +
geom_point(shape = "circle", size = 1.5,
colour = "#112446") +
theme_classic()
#GET MEAN & MEDIAN COMPLETION TIME
demographics$time_mins <- demographics$time_taken/60
#Time taken vs catch score
demographics %>%
filter(!(reviewed_at_datetime %in% "") | is.na(reviewed_at_datetime)) %>%
ggplot() +
aes(x = time_mins, y = catch.score_decimal) +
geom_point(shape = "circle", size = 1.5,
colour = "#112446") +
theme_classic()
View(data)
#MAKING TRIALDATA DATAFRAME WITH ONE ROW PER TRIAL, FOR ALL PARTICIPANTS
{
#select trial variables for analysis
trial_vars<- c("participant", "Circle1_colour", "Circle2_colour", "Colourpair", "similarity", "response_time", "Temporder")
#make trial data frame
trialdata <- data[trial_vars]
#remove empty cells
trialdata <- trialdata %>% drop_na()
trialdata<- trialdata[!apply(trialdata == "", 1, any),]
#remove participants with low catch scores (<0.8)
high_catch<-subset(catch_perperson, score_decimal>=0.8)
low_catch <-subset(catch_perperson, score_decimal<0.8)
trialdata<-subset(trialdata, participant %in% high_catch$participant)
#remove participants with incomplete data
participants <- data.frame(unique(trialdata$participant)) #make dataframe of participants
colnames(participants) <- c("participant_id")
get_trial_count<-function(x){ #get number of trials completed (x = participant id)
trial_count<-sum(trialdata$participant == x)
return(trial_count)
}
participants$trial_count <-lapply(participants$participant_id, get_trial_count)
participants_incomplete <- subset(participants,trial_count < 324)
#dataframe of participants with complete data
participants_complete<- subset(participants,trial_count==324)
participants_ubercomplete<- subset(participants,trial_count>324)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id) #subset trialdata for participants who completed all trials
#make column with trial number
#x=participant
for (x in 1:nrow(participants_complete)) {
trialdata$trialno <- c(1:324)
}
}
View(trialdata)
get_mean.rt<- function(z){
temp_df <- subset(trialdata,participant==z)
mean.rt<- mean(temp_df$response_time)
return(mean.rt)
}
participants_complete$rt <-lapply(participants_complete$participant_id, get_mean.rt)
participants_complete$rt <- as.numeric(participants_complete$rt)
View(catch_perperson)
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .77)+
theme_pubr()
catch_perperson$score_decimal <- as.numeric(catch_perperson$score_decimal)
catch_perperson$response_time <- as.numeric(catch_perperson$response_time)
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .77)+
theme_pubr()
mean(catch_perperson$response_time)
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .77)+
theme_pubr()+
coord_cartesian(ylim = c(0,5))
coord_cartesian(xlim = c(0,5))
ggplot(catch_perperson, aes(response_time, score_decimal))+
+   geom_point()+
+   geom_hline(yintercept = .77)+
+   theme_pubr()+
+ coord_cartesian(xlim = c(0,5))
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .77)+
theme_pubr()+
coord_cartesian(ylim = c(0,5))
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .77)+
theme_pubr()+
coord_cartesian(xlim = c(0,5))
View(high_catch)
View(low_catch)
ggplot(catch_perperson, aes(response_time, score_decimal))+
geom_point()+
geom_hline(yintercept = .8)+
theme_pubr()+
coord_cartesian(xlim = c(0,5))
View(catchdata)
