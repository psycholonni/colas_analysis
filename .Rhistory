return(matrix.df)
}
sim.data_vars <- c("hex1", "hex2", "mean.similarity")
sim.data <- colourpairs[sim.data_vars]
sim.matrix <- matrix.df.fill(sim.data,sim.matrix)
## Make a similarity matrix
# Create blank matrix
sim.matrix <- matrix(0, ncol = 93, nrow = 93)
# setting all give colours as both row and column names
colnames(sim.matrix) <- rownames(sim.matrix) <- unique(trialdata$hex1)
# fill matrix with similarity values
matrix.df.fill <- function(data,matrix.df){
for(i in 1:nrow(data)){
row <- data[i,]
matrix.df[row$hex1,row$hex2] <- row$mean.sim
}
return(matrix.df)
}
sim.data_vars <- c("hex1", "hex2", "mean.sim")
sim.data <- colourpairs[sim.data_vars]
sim.matrix <- matrix.df.fill(sim.data,sim.matrix)
View(sim.data)
sim.data$mean.sim <- as.integer(sim.data$mean.sim)
sim.matrix <- matrix.df.fill(sim.data,sim.matrix)
View(sim.matrix)
sim.data_vars <- c("hex1", "hex2", "mean.sim")
sim.data <- colourpairs[sim.data_vars]
sim.data$mean.sim <- as.numeric(sim.data$mean.sim)
sim.matrix <- matrix.df.fill(sim.data,sim.matrix)
View(sim.matrix)
sim.matrix.df <- as.data.frame(sim.matrix)
fit <- cmdscale(sim.matrix.df, eig= TRUE, k =2)
x <- fit$points[, 1]
y <- fit$points[, 2]
fit.2df<- data.frame(fit$points)
fit.2df$colour <- rownames(fit.2df)
fit.2df$colour  <- with(fit.2df, factor(colour, levels = row.facs))
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))
fit.plot
#3d plot
fit <- cmdscale(sim.matrix.df, eig= TRUE, k =3)
x <- fit$points[, 1]
y <- fit$points[, 2]
z <- fit$points[, 3]
colors <- colnames(sim.matrix)
plot3d(x,y,z, col=colors, size = 10)
#READ FILES
{
## Pilot data with Ishihara
#make a list of data file names
pilot.files <- list.files(path="./data/Pilot data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pilot.data <- sapply(pilot.files, read.csv, simplify=FALSE) %>% bind_rows(.id = "fileId")
#adding Ishihara colomn missing to allow rbind
pilot.data$Ishi_textbox.text <- NA
##Data with Ishihara test
#make a list of data file names
files <- list.files(path="./data", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
data <- sapply(files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
waveiv.files <- list.files(path="./data/wave IV", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
waveiv.data <- sapply(waveiv.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
##Data with Ishihara test
#make a list of data file names
pb.files <- list.files(path="./data/Problematic file", pattern="*.csv", full.names=TRUE)
#make a dataframe binding all datafiles
pb.data <- sapply(pb.files, read.csv, simplify=FALSE) %>%
lapply(\(x) mutate(x, across(Ishi_textbox.text, as.character))) %>% bind_rows(.id = "fileId")
pb.data$textbox.text <- as.character(pb.data$textbox.text)
data <- bind_rows(pb.data, data, pilot.data, waveiv.data)
}
#screening participants with framerate too low
data <- data[data$frameRate>29,]
#(n=527)
#MAKE CATCHDATA DATAFRAME WITH ONE ROW PER CATCH TRIAL, FOR ALL PARTICIPANTS
{
#select catch variables for analysis
catch_vars<- c("participant", "catchnumber", "catchresponse", "response_time_catch")
#make catch data frame
catchdata<-data[data$Catch==1, catch_vars]
#remove empty cells
catchdata <- catchdata %>% drop_na()
#format response time
catchdata$response_time_catch<-as.numeric(catchdata$response_time_catch) #for graphing later
}
#MAKE CATCH_PERPERSON DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make dataframe with catch scores and mean response times
catch_perperson<- data.frame(unique(catchdata$participant))
catch_perperson<-rename(catch_perperson, participant = unique.catchdata.participant.)
#get catch score as decimal
#z=participant id
get_catchscoredecimal<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscoredecimal<-format(round(correct_catch/total_catch, 2), nsmall = 2)
catchscoredecimal<-as.numeric(catchscoredecimal)
return(catchscoredecimal)
}
catch_perperson$score_decimal<-lapply(catch_perperson$participant, get_catchscoredecimal)
#get catch score as fraction - NOT VERY USEFUL
#z=participant id
get_catchscorefraction<- function(z){
temp_df <- subset(catchdata,participant==z)
total_catch <- nrow(temp_df)
correct_catch<- nrow(subset(temp_df,catchnumber==catchresponse))
catchscorefraction<-paste(correct_catch,"/",total_catch)
return(catchscorefraction)
}
catch_perperson$score_fraction<-lapply(catch_perperson$participant, get_catchscorefraction)
#get mean catch response times
#z=participant id
get_catchresponsetime<- function(z){
temp_df <- subset(catchdata,participant==z)
catchresponsetime<-mean(temp_df$response_time_catch)
return(catchresponsetime)
}
catch_perperson$response_time<-lapply(catch_perperson$participant, get_catchresponsetime)
}
#MAKING TRIALDATA DATAFRAME WITH ONE ROW PER TRIAL, FOR ALL PARTICIPANTS
{
#select trial variables for analysis
trial_vars<- c("participant", "Circle1_colour", "Circle2_colour", "Colourpair", "similarity", "response_time", "Temporder")
#make trial data frame
trialdata <- data[trial_vars]
#remove empty cells
trialdata <- trialdata %>% drop_na()
trialdata<- trialdata[!apply(trialdata == "", 1, any),]
#remove participants with low catch scores (<0.8)
high_catch<-subset(catch_perperson, score_decimal>=0.8)
low_catch <-subset(catch_perperson, score_decimal<0.8)
trialdata<-subset(trialdata, participant %in% high_catch$participant)
#remove participants with incomplete data
participants <- data.frame(unique(trialdata$participant)) #make dataframe of participants
colnames(participants) <- c("participant_id")
get_trial_count<-function(x){ #get number of trials completed (x = participant id)
trial_count<-sum(trialdata$participant == x)
return(trial_count)
}
participants$trial_count <-lapply(participants$participant_id, get_trial_count)
participants_incomplete <- subset(participants,trial_count < 324)
#dataframe of participants with complete data
participants_complete<- subset(participants,trial_count==324)
participants_ubercomplete<- subset(participants,trial_count>324)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id) #subset trialdata for participants who completed all trials
#make column with trial number
#x=participant
for (x in 1:nrow(participants_complete)) {
trialdata$trialno <- c(1:324)
}
}
trialdata$similarity[trialdata$similarity == -4] <- 7
trialdata$similarity[trialdata$similarity == -3] <- 6
trialdata$similarity[trialdata$similarity == -2] <- 5
trialdata$similarity[trialdata$similarity == -1] <- 4
trialdata$similarity[trialdata$similarity == 1] <-3
trialdata$similarity[trialdata$similarity == 2] <-2
trialdata$similarity[trialdata$similarity == 3] <-1
trialdata$similarity[trialdata$similarity == 4] <-0
#MAKING TRIALDATA DATAFRAME WITH ONE ROW PER TRIAL, FOR ALL PARTICIPANTS
{
#select trial variables for analysis
trial_vars<- c("participant", "Circle1_colour", "Circle2_colour", "Colourpair", "similarity", "response_time", "Temporder")
#make trial data frame
trialdata <- data[trial_vars]
#remove empty cells
trialdata <- trialdata %>% drop_na()
trialdata<- trialdata[!apply(trialdata == "", 1, any),]
#remove participants with low catch scores (<0.8)
high_catch<-subset(catch_perperson, score_decimal>=0.8)
low_catch <-subset(catch_perperson, score_decimal<0.8)
trialdata<-subset(trialdata, participant %in% high_catch$participant)
#remove participants with incomplete data
participants <- data.frame(unique(trialdata$participant)) #make dataframe of participants
colnames(participants) <- c("participant_id")
get_trial_count<-function(x){ #get number of trials completed (x = participant id)
trial_count<-sum(trialdata$participant == x)
return(trial_count)
}
participants$trial_count <-lapply(participants$participant_id, get_trial_count)
participants_incomplete <- subset(participants,trial_count < 324)
#dataframe of participants with complete data
participants_complete<- subset(participants,trial_count==324)
participants_ubercomplete<- subset(participants,trial_count>324)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id) #subset trialdata for participants who completed all trials
#make column with trial number
#x=participant
for (x in 1:nrow(participants_complete)) {
trialdata$trialno <- c(1:324)
}
}
View(trialdata)
#(n=494)
## RESCALE similarity to be 0-7 instead of -4/+4 - ONLY NECESSARY IF NOT ALREADY 0-7
{trialdata$similarity[trialdata$similarity == 4] <- 7
trialdata$similarity[trialdata$similarity == 3] <- 6
trialdata$similarity[trialdata$similarity == 2] <- 5
trialdata$similarity[trialdata$similarity == 1] <- 4
trialdata$similarity[trialdata$similarity == -1] <-3
trialdata$similarity[trialdata$similarity == -2] <-2
trialdata$similarity[trialdata$similarity == -3] <-1
trialdata$similarity[trialdata$similarity == -4] <-0
}
##CONVERT RGB TO HEX FOR GRAPHING (TRIALDATA)
{
#split rgb strings
#x=rgb string
splitrgb <-function(x){
variable<-str_replace_all(x, "\\[|\\]", "") #delete brackets
variable<-strsplit(variable, split = ",") #split string
variable<-lapply(variable, as.numeric)   #convert to numeric
variable<-lapply(variable, "+", 1)  #convert rgb scale
variable<-lapply(variable, "*", 127.5)
return (as.list(unlist(variable)))
}
trialdata$Circle1_colour <- lapply(trialdata[,"Circle1_colour"], splitrgb) #apply function
trialdata$Circle2_colour <- lapply(trialdata[,"Circle2_colour"], splitrgb)
#make dataframes with rows per r, g, and b
circle1_df <- as.data.frame(lapply(trialdata[,"Circle1_colour"], function(x) t(do.call(cbind, x))))
circle2_df <- as.data.frame(lapply(trialdata[,"Circle2_colour"], function(x) t(do.call(cbind, x))))
#swap rows and columns
circle1_df <- t(circle1_df)
circle2_df <- t(circle2_df)
#name columns
colnames(circle1_df) <- c("r1", "g1", "b1")
colnames(circle2_df) <- c("r2", "g2", "b2")
circle1_df<-as.data.frame(circle1_df)
circle2_df<-as.data.frame(circle2_df)
circle1_df$hex1 <- NA
circle2_df$hex2 <- NA
#rgb2hex function
rgb2hex <- function(r, g, b) {rgb(r, g, b, maxColorValue = 255)}
#Get hex in each circle dataframe
circle1_df$hex1 <- apply(circle1_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
circle2_df$hex2 <- apply(circle2_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
#bind circle colour dataframes to trialdata
trialdata <- cbind(trialdata, circle1_df, circle2_df)
}
#MAKE PASS COLUMNS IN TRIAL DATA
{
trialdata_passes<-trialdata
names(trialdata_passes)[names(trialdata_passes) == 'similarity'] <- 'firstpass_similarity'
trialdata_passes$secondpass_similarity <- NA
names(trialdata_passes)[names(trialdata_passes) == 'response_time'] <- 'firstpass_responsetime'
trialdata_passes$secondpass_responsetime<-NA
for (x in 0:(nrow(participants_complete)-1)) { #put 2nd pass data in that column (x = row number in participants_complete)
trialdata_passes$secondpass_similarity[((x*324)+1):((x*324)+162)] <- trialdata_passes$firstpass_similarity[((x*324)+163):((x*324)+324)]
trialdata_passes$secondpass_responsetime[((x*324)+1):((x*324)+162)] <- trialdata_passes$firstpass_responsetime[((x*324)+163):((x*324)+324)]
}
#delete extra rows
trialdata_passes <- na.omit(trialdata_passes)
#make a column with the mean similarity value from the two passes
means<-data.frame(similarity=rowMeans(trialdata_passes[,c("firstpass_similarity", "secondpass_similarity")]))
trialdata_passes<-cbind(trialdata_passes,means)
}
#CORRELATION DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make a dataframe to store correlation values
pass_correlation <- data.frame(participants_complete$participant_id)
names(pass_correlation)[names(pass_correlation) == 'participants_complete.participant_id'] <- 'participant'
pass_correlation$pearson<- NA
pass_correlation$spearman<- NA
#put correlation values into dataframe
#x <- participant id
getpearson<-function(z){
temp_df <- subset(trialdata_passes,participant==z)
pearson <- cor(x=temp_df$firstpass_similarity, y=temp_df$secondpass_similarity, method="pearson")
return(pearson)
}
getspearman<-function(z){
temp_df <- subset(trialdata_passes,participant==z)
spearman <- cor(x=temp_df$firstpass_similarity, y=temp_df$secondpass_similarity, method="spearman")
return(spearman)
}
pass_correlation$pearson<-lapply(participants_complete$participant, getpearson) #apply fn
pass_correlation$spearman<-lapply(participants_complete$participant, getspearman)
#make correlation numeric for graphing
pass_correlation$pearson<-as.numeric(pass_correlation$pearson)
pass_correlation$spearman<-as.numeric(pass_correlation$spearman)
#if error: check trialdata_passes that resulted in NA correlation
unique(unlist (lapply (pass_correlation, function (x) which (is.na (x)))))
#trialdata_passes[trialdata_passes$participant == '61652222bfd9351c91a6585a',]
#drop rows with NA correlation #
pass_correlation<- na.omit(pass_correlation)
#covert rho to fisher's z
#x=rho value
get_fisherz <-function(x){
variable<-(0.5*(log(1+x) - log(1-x)) )
return(variable)
}
pass_correlation$fisherz <- lapply(pass_correlation[,"pearson"], get_fisherz) #apply function
pass_correlation$fisherz<-as.numeric(pass_correlation$fisherz)
}
#REASONABLE THRESHOLD OF EXCLUSION (Doublepass cor below 2SD)
{
#save mean fisherz
mean_z<- round(mean(pass_correlation$fisherz), 2)
sd_z<- round(sd(pass_correlation$fisherz), 2)
#Participants below 2 standard deviation of mean correlation
outsiders <- pass_correlation[pass_correlation$fisherz<(mean_z-2*sd_z),]
pass_correlation <- subset(pass_correlation, !participant %in% outsiders$participant)
trialdata <- subset(trialdata, !participant %in% participants_incomplete$participant_id)
trialdata <- subset(trialdata, !participant %in% outsiders$participant)
}
{
#MAKE DATAFRAME WITH ONE ROW PER ANSWER
{
IH_vars<- c("participant", "Ishi_textbox.text", "imageaddress")
#"Ishi_trial_keyresp.rt",
#make catch data frame
IHdata<-data[IH_vars]
#remove empty cells
IHdata <- IHdata %>% drop_na()
}
#Scoring reference
scoringtable<- read_excel("PictureConditions.xlsx")
#inserting correct answers to participants dataframe
IHdata <- merge(IHdata, scoringtable, by= "imageaddress")
#coercing answers into numeric for efficient matching
IHdata$answer.numeric <- as.numeric(IHdata$Ishi_textbox.text)
IHdata$match <- IHdata$answer.numeric==IHdata$correctanswer
#MAKE IH_PERPERSON DATAFRAME WITH ONE ROW PER PARTICIPANT
{
#make dataframe with IH scores
IH_perperson<- data.frame(unique(IHdata$participant))
IH_perperson<-rename(IH_perperson, participant = unique.IHdata.participant.)
}
#get IH correctly answered
{get_IHcorrectQs<- function(z){
temp_df <- subset(IHdata,participant==z)
correct_IH<- nrow(subset(temp_df,match==TRUE))
return(correct_IH)
}
IH_perperson$correctA<-lapply(IH_perperson$participant, get_IHcorrectQs)
IH_perperson$correctA <- as.numeric(IH_perperson$correctA)
}
#get IH questions answered
{get_IHtotal_answered<- function(z){
temp_df <- subset(IHdata,participant==z)
total_IH <- nrow(temp_df)
return(total_IH)
}
IH_perperson$total_answered<-lapply(IH_perperson$participant, get_IHtotal_answered)
IH_perperson$total_answered <- as.numeric(IH_perperson$total_answered)
}
#subsetting a single participant if required
#singleIHdata<-IHdata[IHdata$participant == "61716a16c157db249e36fc46", ]
#head(singleIHdata)
#these participant submitted two files
IH_perperson <- subset(IH_perperson,!participant == "61716a16c157db249e36fc46")
IH_perperson <- subset(IH_perperson,!participant == "614deecf67f2c8ccfe3df23b")
#Distribution of IH scores
ggplot(IH_perperson, aes(correctA)) +
geom_histogram() +
scale_x_continuous(breaks = as.numeric(round(quantile(IH_perperson$correctA),digits = 2))) +
theme_pubr() +
theme(axis.line = element_blank())+
geom_rangeframe()+
labs(x="Ishihara score",
title= "Histogram of Ishihara score")
#below threshold of normal colour vision
IH_perperson.low <- subset(IH_perperson, correctA <14)
#Removing participants with low Ishihara scores
trialdata_passes <- subset(trialdata_passes, !participant %in% IH_perperson.low$participant)
}
#MAKE DATAFRAME OF COLOURPAIRS
{
#get unique hex arrangements
colourpairs <- unique(trialdata_passes[ , c("hex1", "hex2")])
#Create unique pair name by concatening first colour with second colour
colourpairs$pair <- str_c(colourpairs$hex1, '',colourpairs$hex2)
#do the same for trialdata_passes
trialdata_passes$pairofcolour <- str_c(trialdata_passes$hex1, '',trialdata_passes$hex2)
}
View(colourpairs)
get_mean_similarity <- function(z){
a<-subset(trialdata_passes, pairofcolour==z) #similarity with exact hex match
mean<-mean(a$similarity)
return(mean)
}
colourpairs$mean.similarity<-lapply(colourpairs$pair, get_mean_similarity)
colourpairs$mean.similarity<- as.numeric(colourpairs$mean.similarity)
get_mean.sim <- function(z){
a<-subset(colourpairs, pair==z) #getting all the instance in pair matching the pair of hexcodes
a<- a["mean.similarity"] #only keeping the similarity score of interest
b<-subset(colourpairs, pair.reversed==z) #repeating with pair reversed
b<- b["mean.similarity"] # again keeping only scores of reversed pairs
c <-rbind(a, b) #all similarity ratings for one combination
mean.sim <- mean(c$mean.similarity)
return(mean.sim)
}
colourpairs$mean.sim<-lapply(colourpairs$pair, get_mean.sim)
colourpairs$pair.reversed <- str_c(colourpairs$hex2, '',colourpairs$hex1)
colourpairs$mean.sim<-lapply(colourpairs$pair, get_mean.sim)
colourpairs$mean.sim<- as.numeric(colourpairs$mean.sim)
View(colourpairs)
colourpairs$mean.sim <- 7- colourpairs$mean.sim
## Make a similarity matrix
# Create blank matrix
sim.matrix <- matrix(3.5, ncol = 93, nrow = 93)
# setting all give colours as both row and column names
colnames(sim.matrix) <- rownames(sim.matrix) <- unique(trialdata$hex1)
# fill matrix with similarity values
matrix.df.fill <- function(data,matrix.df){
for(i in 1:nrow(data)){
row <- data[i,]
matrix.df[row$hex1,row$hex2] <- row$mean.sim
}
return(matrix.df)
}
sim.data_vars <- c("hex1", "hex2", "mean.sim")
sim.data <- colourpairs[sim.data_vars]
sim.data$mean.sim <- as.numeric(sim.data$mean.sim)
sim.matrix <- matrix.df.fill(sim.data,sim.matrix)
sim.matrix.df <- as.data.frame(sim.matrix)
View(sim.matrix)
fit <- cmdscale(sim.matrix.df, eig= TRUE, k =2)
x <- fit$points[, 1]
y <- fit$points[, 2]
fit.2df<- data.frame(fit$points)
fit.2df$colour <- rownames(fit.2df)
fit.2df$colour  <- with(fit.2df, factor(colour, levels = row.facs))
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))
#ariel's cheat to display colour in axis
block <- paste(strrep("\U2588",10),sep='')
block_rep <- rep(block,93)
#Create list of colours for factors
{file <- read_xlsx("colourcodes.xlsx")
##CONVERT RGB TO HEX
#split rgb strings
#x=rgb string
splitrgb <-function(x){
variable<-str_replace_all(x, "\\[|\\]", "") #delete brackets
variable<-strsplit(variable, split = ",") #split string
variable<-lapply(variable, as.numeric)   #convert to numeric
variable<-lapply(variable, "/", 100)  #convert rgb scale
variable<-lapply(variable, "*", 255)
return (as.list(unlist(variable)))
}
#remove last character to clean
file$Colourcodes2 <- str_remove(file$Colourcodes, ";")
file$colour <- lapply(file$Colourcodes2, splitrgb)
#make dataframes with rows per r, g, and b
colour_df <- as.data.frame(lapply(file$colour, function(x) t(do.call(cbind, x))))
#swap rows and columns
colour_df <- t(colour_df)
#name columns
colnames(colour_df) <- c("r", "g", "b")
#turn into a dataframe
colour_df<-as.data.frame(colour_df)
colour_df$hex <- NA
#rgb2hex function
rgb2hex <- function(r, g, b) {rgb(r, g, b, maxColorValue = 255)}
#Get hexcode
colour_df$hex <- apply(colour_df, 1, function(x) rgb2hex(x[1], x[2], x[3]))
row.facs <- colour_df$hex
}
fit.2df$colour  <- with(fit.2df, factor(colour, levels = row.facs))
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))
fit.plot
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
theme_pubr()
fit.plot
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
theme_pubr(legend.position = "right")
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
theme(legend.position = "right")+
theme_pubr()
fit.plot
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
theme(legend.position = "left")+
theme_pubr()
fit.plot
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
guide( color= "none")+
theme_pubr()
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
theme(legend.position = "none") +
theme_pubr()
fit.plot
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
guides(col = FALSE) +
theme_pubr()
fit.plot <- ggplot(data = fit.2df, aes(x = X1, y = X2, color=colour)) + geom_point() +
scale_color_manual(values = c(row.facs))+
guides(col = "none") +
theme_pubr()
fit.plot
#3d plot
fit <- cmdscale(sim.matrix.df, eig= TRUE, k =3)
x <- fit$points[, 1]
y <- fit$points[, 2]
z <- fit$points[, 3]
colors <- colnames(sim.matrix)
plot3d(x,y,z, col=colors, size = 10)
plot3d(x,y,z, col=colors, size = 15)
